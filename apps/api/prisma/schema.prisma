generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum UserType {
  JOB_SEEKER
  COMPANY
}

enum SeniorityLevel {
  TRAINEE
  JUNIOR
  MIDDLE
  SENIOR
  LEAD
}

enum LanguageLevel {
  ELEMENTARY
  PRE_INTERMEDIATE
  INTERMEDIATE
  UPPER_INTERMEDIATE
  ADVANCED
  PROFICIENT
}

enum WorkFormat {
  OFFICE
  REMOTE
  HYBRID
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  CONTRACT
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  password        String
  type            UserType
  isEmailVerified Boolean  @default(false) @map("is_email_verified")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  jobSeeker JobSeeker?
  company   Company?

  @@map("users")
}

model JobSeeker {
  id             String    @id @default(uuid())
  userId         String    @unique @map("user_id")
  firstName      String    @map("first_name")
  lastName       String    @map("last_name")
  location       String?
  bio            String?
  avatarUrl      String?   @map("avatar_url")
  dateOfBirth    DateTime? @map("date_of_birth")
  expectedSalary Int?      @map("expected_salary")
  isOpenToWork   Boolean   @default(false) @map("is_open_to_work")

  seniorityLevel SeniorityLevel? @map("seniority_level")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  contacts  JobSeekerContacts?
  languages JobSeekerLanguage[]
  skills    JobSeekerSkill[]

  @@map("job_seekers")
}

model JobSeekerContacts {
  id          String  @id @default(uuid())
  jobSeekerId String  @unique @map("job_seeker_id")
  githubUrl   String? @map("github_url")
  linkedinUrl String? @map("linkedin_url")
  telegramUrl String? @map("telegram_url")
  publicEmail String? @map("public_email")
  phoneNumber String? @map("phone_number")

  jobSeeker JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)

  @@map("job_seeker_contacts")
}

model JobSeekerLanguage {
  languageLevel LanguageLevel @map("language_level")

  jobSeekerId String    @map("job_seeker_id")
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
  languageId  String    @map("language_id")
  language    Language  @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@id([jobSeekerId, languageId])
  @@map("job_seekers_languages")
}

model Language {
  id   String @id @default(uuid())
  name String @unique

  jobSeekers JobSeekerLanguage[]

  @@map("languages")
}

model JobSeekerSkill {
  jobSeekerId String    @map("job_seeker_id")
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
  skillId     String    @map("skill_id")
  skill       Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([jobSeekerId, skillId])
  @@map("job_seekers_skills")
}

model Skill {
  id   String @id @default(uuid())
  name String @unique

  jobSeekers   JobSeekerSkill[]
  VacancySkill VacancySkill[]

  @@map("skills")
}

model Company {
  id          String  @id @default(uuid())
  userId      String  @unique @map("user_id")
  name        String
  description String?
  url         String?
  logoUrl     String? @map("logo_url")
  isVerified  Boolean @default(false) @map("is_verified")

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vacancies Vacancy[]

  @@map("companies")
}

model Vacancy {
  id                 String           @id @default(uuid())
  companyId          String           @map("company_id")
  title              String
  description        String
  salaryMin          Int?             @map("salary_min")
  salaryMax          Int?             @map("salary_max")
  officeLocation     String?          @map("office_location")
  experienceRequired Int?             @default(0) @map("experience_required")
  isActive           Boolean?         @default(true) @map("is_active")
  archivedAt         DateTime?        @map("archived_at")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  workFormat         WorkFormat[]     @map("work_format")
  employmentType     EmploymentType[] @map("employment_type")
  seniorityLevel     SeniorityLevel   @map("seniority_level")

  company        Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  requiredSkills VacancySkill[]

  @@map("vacancies")
}

model VacancySkill {
  vacancyId String  @map("vacancy_id")
  vacancy   Vacancy @relation(fields: [vacancyId], references: [id], onDelete: Cascade)
  skillId   String  @map("skill_id")
  skill     Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([vacancyId, skillId])
  @@map("vacancies_skills")
}
