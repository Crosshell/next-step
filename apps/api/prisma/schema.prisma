generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum ApplicationStatus {
  SUBMITTED
  REJECTED
  ACCEPTED
}

enum UserType {
  JOB_SEEKER
  COMPANY
  ADMIN

  @@map("user_type")
}

enum SeniorityLevel {
  TRAINEE
  JUNIOR
  MIDDLE
  SENIOR
  LEAD

  @@map("seniority_level")
}

enum LanguageLevel {
  ELEMENTARY
  PRE_INTERMEDIATE
  INTERMEDIATE
  UPPER_INTERMEDIATE
  ADVANCED
  NATIVE

  @@map("language_level")
}

enum WorkFormat {
  OFFICE
  REMOTE
  HYBRID

  @@map("work_format")
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  CONTRACT

  @@map("employment_type")
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  password        String
  type            UserType
  isEmailVerified Boolean  @default(false) @map("is_email_verified")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  jobSeeker JobSeeker?
  company   Company?

  @@map("users")
}

model JobSeeker {
  id             String    @id @default(uuid())
  userId         String    @unique @map("user_id")
  firstName      String    @map("first_name")
  lastName       String    @map("last_name")
  location       String?
  bio            String?
  avatarUrl      String?   @map("avatar_url")
  dateOfBirth    DateTime? @map("date_of_birth")
  expectedSalary Int?      @map("expected_salary")
  isOpenToWork   Boolean   @default(false) @map("is_open_to_work")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  seniorityLevel SeniorityLevel? @map("seniority_level")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  contacts    JobSeekerContacts?
  languages   JobSeekerLanguage[]
  skills      JobSeekerSkill[]
  Application Application[]

  @@index([isOpenToWork])
  @@map("job_seekers")
}

model JobSeekerContacts {
  jobSeekerId String  @unique @map("job_seeker_id")
  githubUrl   String? @map("github_url")
  linkedinUrl String? @map("linkedin_url")
  telegramUrl String? @map("telegram_url")
  publicEmail String? @map("public_email")
  phoneNumber String? @map("phone_number")

  jobSeeker JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([jobSeekerId])
  @@map("job_seeker_contacts")
}

model JobSeekerLanguage {
  level LanguageLevel

  jobSeekerId String    @map("job_seeker_id")
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  languageId  String    @map("language_id")
  language    Language  @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([jobSeekerId, languageId])
  @@map("job_seekers_languages")
}

model JobSeekerSkill {
  jobSeekerId String    @map("job_seeker_id")
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  skillId     String    @map("skill_id")
  skill       Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([jobSeekerId, skillId])
  @@map("job_seekers_skills")
}

model Language {
  id   String @id @default(uuid())
  name String @unique

  jobSeekers JobSeekerLanguage[]
  vacancies  VacancyLanguage[]

  @@map("languages")
}

model Skill {
  id   String @id @default(uuid())
  name String @unique

  jobSeekers   JobSeekerSkill[]
  VacancySkill VacancySkill[]

  @@map("skills")
}

model Company {
  id          String   @id @default(uuid())
  userId      String   @unique @map("user_id")
  name        String
  description String?
  url         String?
  logoUrl     String?  @map("logo_url")
  isVerified  Boolean  @default(false) @map("is_verified")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vacancies Vacancy[]

  @@map("companies")
}

model Vacancy {
  id                 String   @id @default(uuid())
  companyId          String   @map("company_id")
  title              String
  description        String
  salaryMin          Int      @map("salary_min")
  salaryMax          Int      @map("salary_max")
  officeLocation     String?  @map("office_location")
  experienceRequired Int?     @default(0) @map("experience_required")
  isActive           Boolean? @default(false) @map("is_active")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  workFormat        WorkFormat[]
  employmentType    EmploymentType[]
  requiredSkills    VacancySkill[]
  requiredLanguages VacancyLanguage[]

  seniorityLevel SeniorityLevel @map("seniority_level")

  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Application Application[]

  @@map("vacancies")
}

model VacancyLanguage {
  level LanguageLevel

  vacancyId  String   @map("vacancy_id")
  vacancy    Vacancy  @relation(fields: [vacancyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  languageId String   @map("language_id")
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([vacancyId, languageId])
  @@map("vacancies_languages")
}

model VacancySkill {
  vacancyId String  @map("vacancy_id")
  vacancy   Vacancy @relation(fields: [vacancyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  skillId   String  @map("skill_id")
  skill     Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([vacancyId, skillId])
  @@map("vacancies_skills")
}

model Application {
  id          String            @id @default(uuid())
  jobSeekerId String            @map("job_seeker_id")
  vacancyId   String            @map("vacancy_id")
  status      ApplicationStatus @default(SUBMITTED)
  coverLetter String?           @map("cover_letter")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  jobSeeker JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vacancy   Vacancy   @relation(fields: [vacancyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([jobSeekerId, vacancyId])
  @@map("applications")
}
